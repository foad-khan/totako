import React from 'react';
import type { PatientHistory, Duration, ChiefComplaint, HOPData, FamilyHistory, PastHistoryData, DifferentialDiagnosis } from '../types';

interface PrintableReportProps {
    history: PatientHistory;
    summary?: string;
    diagnoses?: DifferentialDiagnosis[];
}

const Section: React.FC<{ title: string; children: React.ReactNode }> = ({ title, children }) => (
    <div className="mb-6">
        <h2 className="text-xl font-bold text-teal-700 border-b-2 border-teal-600 pb-1 mb-3 pdf-heading">{title}</h2>
        {children}
    </div>
);

const Field: React.FC<{ label: string; value?: string | string[] | null | undefined }> = ({ label, value }) => {
    const displayValue = Array.isArray(value) ? value.join(', ') : value;
    if (!displayValue) return null;
    return (
        <div className="flex mb-2 pdf-avoid-break">
            <p className="w-1/3 font-semibold text-slate-600">{label}:</p>
            <p className="w-2/3 text-slate-800">{displayValue}</p>
        </div>
    );
};

const formatBooleanHistory = (history: FamilyHistory | PastHistoryData) => {
    const conditions = [];
    if (history.hasDiabetes) conditions.push('Diabetes Mellitus');
    if (history.hasTB) conditions.push('Tuberculosis (TB)');
    if (history.hasThyroid) conditions.push('Thyroid Disorders');
    const hasConditions = conditions.length > 0;
    const hasOther = history.other && history.other.trim() !== '';

    if (!hasConditions && !hasOther) {
        return <p className="text-slate-500 italic">None reported.</p>;
    }

    return (
        <div>
            {hasConditions && (
                <div className="mb-2 pdf-avoid-break">
                    <p className="font-semibold text-slate-600">Specific Conditions:</p>
                    <ul className="list-disc list-inside ml-4 text-slate-800">
                        {conditions.map(c => <li key={c}>{c}</li>)}
                    </ul>
                </div>
            )}
            {hasOther && <Field label="Other" value={history.other} />}
        </div>
    );
};

const formatDuration = (duration: Duration): string => {
    const parts = [];
    const years = parseInt(duration.years, 10) || 0;
    const months = parseInt(duration.months, 10) || 0;
    const days = parseInt(duration.days, 10) || 0;
    if (years > 0) parts.push(`${years} year${years > 1 ? 's' : ''}`);
    if (months > 0) parts.push(`${months} month${months > 1 ? 's' : ''}`);
    if (days > 0) parts.push(`${days} day${days > 1 ? 's' : ''}`);
    return parts.join(', ') || 'N/A';
};

const HOPReport: React.FC<{ hop: HOPData }> = ({ hop }) => {
    const progressionValue = hop.progression === 'Other' ? `Other: ${hop.progressionOther}`.trim() : hop.progression;
    
    return (
         <div className="pl-4 mt-2 space-y-2">
            <h4 className="font-semibold text-teal-800">History of Presenting Complaint</h4>
            <div className="pl-4 border-l-2 border-slate-200">
                <Field label="Site" value={hop.site} />
                <Field label="Onset" value={hop.onset} />
                <Field label="Character" value={hop.character} />
                <Field label="Progression" value={progressionValue} />
                <Field label="Timing/Duration" value={hop.timingAndDuration} />
                <Field label="Rate/Frequency" value={hop.rateFrequency} />
                <Field label="Associative Factors" value={hop.associativeFactor} />
                <Field label="Aggravating Factors" value={hop.aggravatingFactor} />
                <Field label="Relieving Factors" value={hop.relievingFactor} />
                <Field label="Other Details" value={hop.other} />
            </div>
        </div>
    );
};

const PrintableReport: React.FC<PrintableReportProps> = ({ history, summary, diagnoses }) => {
    const { demographics, chiefComplaints, pastHistory, personalHistory, familyHistory } = history;
    
    return (
        <div className="bg-white p-8 font-sans text-sm">
            <style>{`
                .pdf-avoid-break {
                    break-inside: avoid;
                    page-break-inside: avoid;
                }
                .pdf-heading {
                    break-after: avoid;
                    page-break-after: avoid;
                }
            `}</style>
            <header className="text-center mb-8 border-b-2 border-slate-300 pb-4">
                <h1 className="text-3xl font-bold text-teal-700">Confidential Patient History Report</h1>
                <p className="text-slate-600 mt-1">Generated by AI Patient History</p>
            </header>
            
            <Section title="Patient Demographics">
                <Field label="Patient's Name" value={demographics.name} />
                <Field label="Age" value={demographics.age} />
                <Field label="Sex" value={demographics.sex} />
                <Field label="Attendant's Name" value={demographics.attendantName} />
                <Field label="Phone Number" value={demographics.phoneNumber} />
                <Field label="Blood Group" value={demographics.bloodGroup} />
                <Field label="Address" value={demographics.address} />
                <Field label="Marital Status" value={demographics.maritalStatus} />
                <Field label="Religion" value={demographics.religion} />
                <h3 className="font-bold text-slate-700 mt-4 mb-2 border-t pt-2 pdf-heading">Socio-economic Details</h3>
                <Field label="Education (Head of Family)" value={demographics.education} />
                <Field label="Occupation (Head of Family)" value={demographics.occupation} />
                <Field label="Total Monthly Family Income" value={demographics.familyIncome ? `₹${demographics.familyIncome}` : ''} />
                <Field label="Calculated Socio-economic Status" value={demographics.socioEconomicStatus} />
            </Section>

            <Section title="Chief Complaints & History of Presenting Complaint">
                {chiefComplaints.filter(c => c.complaint.trim()).length > 0 ? (
                    chiefComplaints.filter(c => c.complaint.trim()).map((complaint, index) => (
                        <div key={complaint.id} className="mb-4 pb-2 border-b border-slate-200 last:border-b-0 pdf-avoid-break">
                            <h3 className="text-md font-bold text-slate-800 pdf-heading">
                                {index + 1}. {complaint.complaint}
                                <span className="font-normal text-slate-600 ml-2">({formatDuration(complaint.duration)})</span>
                            </h3>
                            <HOPReport hop={complaint.hop} />
                        </div>
                    ))
                ) : (
                    <p className="text-slate-500 italic">No chief complaints reported.</p>
                )}
            </Section>

            <Section title="Past Medical & Surgical History">
                {formatBooleanHistory(pastHistory)}
            </Section>

            <Section title="Personal History">
                <Field label="Diet" value={personalHistory.diet} />
                <Field label="Sleep Pattern" value={personalHistory.sleep} />
                <Field label="Appetite" value={personalHistory.appetite} />
                <Field label="Bladder Habits" value={personalHistory.bladder} />
                <Field label="Bowel Habits" value={personalHistory.bowel} />
                <Field label="Habits" value={personalHistory.habits.length > 0 ? personalHistory.habits : 'None reported'} />
                <Field label="Other Relevant History" value={personalHistory.other} />
            </Section>

            <Section title="Family History">
                {formatBooleanHistory(familyHistory)}
            </Section>

            {summary && (
                <Section title="AI Generated Summary">
                    <p className="text-slate-800 whitespace-pre-wrap pdf-avoid-break">{summary}</p>
                </Section>
            )}

            {diagnoses && diagnoses.length > 0 && (
                <Section title="AI Suggested Differential Diagnoses">
                    <p className="text-xs text-slate-500 italic mb-3 pdf-avoid-break">
                        <strong>Disclaimer:</strong> This is an AI-generated list for educational purposes only and is not a substitute for professional clinical judgment.
                    </p>
                    <ul className="space-y-3">
                        {diagnoses.map((item, index) => (
                            <li key={index} className="pb-2 border-b border-slate-200 last:border-b-0 pdf-avoid-break">
                                <p className="font-bold text-slate-800 pdf-heading">{index + 1}. {item.diagnosis}</p>
                                <p className="text-slate-600 mt-1 pl-4">{item.rationale}</p>
                            </li>
                        ))}
                    </ul>
                </Section>
            )}

            <footer className="text-center mt-8 pt-4 border-t border-slate-200 text-slate-500 text-xs">
                <p>Made with ❤️ by Abdullah Soad.</p>
            </footer>
        </div>
    );
};

export default PrintableReport;